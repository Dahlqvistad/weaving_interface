import express, { Request, Response } from 'express';
import cors from 'cors';
import { MachineRawModel } from './database/models/MachineRaw';
import { MachineModel } from './database/models/Machine';

const app = express();
const port = 8080;
const host = "192.168.88.118";

app.use(cors());
app.use(express.json());

// Endpoint to receive data from ESP32 devices
app.post('/api/machine-data', async (req: Request, res: Response) => {
    try {
        const { machine_id, timestamp, event_type, value, fabric_id, meta } = req.body;
        
        console.log(`Received data from ESP32-${machine_id}:`, req.body);
        
        // Store raw data
        await MachineRawModel.create({
            machine_id,
            timestamp: timestamp || new Date().toISOString(),
            event_type: event_type || 'production',
            value: value || 1,
            fabric_id,
            meta
        });
        
        // Update machine status and daily meter count
        const machine = await MachineModel.getById(machine_id);
        if (machine) {
            await MachineModel.update(machine_id, {
                status: event_type === 'production' ? 1 : 0,
                skott_idag: machine.skott_idag + (value || 0),
                last_active: new Date().toISOString()
            });
        }
        
        res.json({ success: true, message: 'Data received and stored' });
    } catch (error: any) {
        console.error('Error processing ESP32 data:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// Device registration endpoint for ESP32 devices
app.post('/api/register-device', async (req: Request, res: Response) => {
    try {
        const { firmware_version, device_type, capabilities } = req.body;
        
        console.log('Device registration request:', req.body);
        console.log('Client IP:', req.ip || req.connection.remoteAddress);
        
        // Find the next available machine ID
        const machines = await MachineModel.getAll();
        const maxId = machines.length > 0 ? Math.max(...machines.map(m => m.id || 0)) : 0;
        const newDeviceId = maxId + 1;
        const deviceName = `Weaving-Machine-${newDeviceId}`;
        
        // Create a new machine entry in the database
        await MachineModel.create({
            name: deviceName,
            ip: req.ip || req.connection.remoteAddress || 'unknown',
            status: 0, // Initially inactive
            skott_idag: 0,
            driftstatus: 0
        });
        
        console.log(`Registered new device: ID=${newDeviceId}, Name=${deviceName}`);
        
        res.json({
            success: true,
            message: 'Device registered successfully',
            device_id: newDeviceId,
            device_name: deviceName,
            assigned_ip: req.ip || req.connection.remoteAddress
        });
    } catch (error: any) {
        console.error('Error registering device:', error);
        res.status(500).json({ 
            success: false, 
            error: 'Failed to register device',
            message: error.message 
        });
    }
});

// Health check endpoint
app.get('/api/health', (req: Request, res: Response) => {
    res.json({ 
        status: 'Weaving Interface API running', 
        timestamp: new Date().toISOString() 
    });
});


// Get all registered devices
app.get('/api/devices', async (req: Request, res: Response) => {
    try {
        const machines = await MachineModel.getAll();
        res.json({
            success: true,
            devices: machines.map(machine => ({
                device_id: machine.id,
                device_name: machine.name,
                ip: machine.ip,
                status: machine.status,
                last_active: machine.last_active
            }))
        });
    } catch (error: any) {
        res.status(500).json({ error: error.message });
    }
});
// Get current machine status (for ESP32 to check)
app.get('/api/machines', async (req: Request, res: Response) => {
    try {
        const machines = await MachineModel.getAll();
        res.json(machines);
    } catch (error: any) {
        res.status(500).json({ error: error.message });
    }
});

export const startHttpServer = () => {
    app.listen(port, host, () => {
        console.log(`HTTP API server running on http://${host}:${port}`);
        console.log('Ready to receive data from ESP32 devices...');
    });
};
